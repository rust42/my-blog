{
    "title": "How I Built My Blog with AWS, Kotlin, and React",
    "author": "Sandeep Koirala",
    "date": "2024-01-15",
    "image": "images/image17.png",
    "intro": "I've had the idea to create my own blog for years but couldn't start due to various reasons. Fortunately, a course on cloud computing changed everything for me. It not only gave me a solid understanding of AWS but also the perfect opportunity to finally build the blogging platform I dreamed of. Using AWS for the backend, Kotlin for its powerful yet concise coding capabilities, and React for an interactive front end, I embarked on this exciting project. This wasn't just about bringing tools together; it was about realizing a long-held dream with the right knowledge and resources.",
    "sections": [
      {
        "title": "Laying the Groundwork with AWS SAM",
        "contents": [
          {
            "description": "The foundation of my blogging platform is anchored in AWS Serverless Application Model (SAM), a model that has dramatically simplified the way I define and deploy serverless applications on AWS. Utilizing SAM's capabilities, I crafted a series of YAML templates that represent the architectural blueprint of our platform. These templates outline everything from Lambda functions that power our backend logic, to the API Gateway endpoints that expose our APIs, and the DynamoDB tables for data persistence. SAM's integration with CloudFormation ensures that deploying and managing these resources is as seamless as iterating over the application code itself."
          }
        ]
      },
      {
        "title": "Streamlining CI/CD with AWS CodePipeline",
        "contents": [
          {
            "description": "The agility of my development process is maintained through a CI/CD pipeline built with AWS CodePipeline, complemented by CodeCommit for version control and CodeBuild for automated builds. This setup automates the testing and deployment phases of our code, ensuring that each commit triggers a pipeline run that builds, tests, and deploys our application across multiple environments. The integration with CodeCommit provides a secure, scalable infrastructure for source control, while CodeBuild handles the compilation, testing, and packaging of our Kotlin application, readying it for deployment."
          }
        ]
      },
      {
        "title": "The Kotlin Advantage in Serverless Computing",
        "contents": [
          {
            "description": "Choosing Kotlin as the programming language for our serverless backend was a strategic decision driven by Kotlin's concise syntax, robust type inference, and seamless interoperability with Java. These features make Kotlin an ideal choice for developing AWS Lambda functions, allowing us to write more expressive, maintainable code. Our Lambda functions, which form the backbone of the blogging platform, are designed to handle a variety of tasks including rendering blog content, managing subscriptions, and processing contact requests, all while benefiting from the scalability and performance of the AWS serverless ecosystem."
          }
        ]
      },
      {
        "title": "DynamoDB and Streams",
        "contents": [
          {
            "description": "At the heart of our platform lies Amazon DynamoDB, chosen for its unparalleled scalability, performance, and ease of management as a NoSQL database service. DynamoDB tables store critical data such as subscriber information and blog content metadata. To enhance our platform's interactivity and real-time capabilities, I leverage DynamoDB Streams. This feature captures changes to items in our tables and triggers AWS Lambda functions in response, enabling use cases like sending automatic email notifications via SES whenever new contact requests are recorded. This architecture not only decouples our components but also introduces a layer of real-time data processing that enriches the user experience."
          }
        ]
      },
      {
        "title": "Subscription Workflow Optimization with SQS",
        "contents": [
          {
            "description": "Managing blog subscriptions is streamlined through Amazon Simple Queue Service (SQS), which queues subscription requests for processing. Once a reader subscribes, their information is stored in DynamoDB, and a message is dispatched to an SQS queue. This triggers another Lambda function that sends a confirmation email with a subscription link, ensuring the reader's email is verified before adding them to the subscriber list. This process not only automates the subscription workflow but also introduces reliability and scalability, handling spikes in subscription requests without a hitch."
          }
        ]
      },
      {
        "title": "Building the Frontend with React and TypeScript",
        "contents": [
          {
            "description": "The frontend of our blogging platform is engineered using React and TypeScript, a combination that offers a powerful development experience with strong typing and modern JavaScript features. React's component-based architecture allows us to build a dynamic, responsive user interface that renders blog posts, images, and code snippets from JSON data fetched from an S3 bucket. This approach not only makes our platform highly interactive but also simplifies content updates and management, as new blog posts can be deployed by simply uploading new JSON files to S3."
          }
        ]
      },
      {
        "title": "A Modular Approach to Domain Management",
        "contents": [
          {
            "description": "The use of subdomains such as `blog.k6sandeep.com` and `api.blog.k6sandeep.com` is a deliberate choice to modularize our platform. This structure not only facilitates the organization of frontend and backend components but also sets the stage for future expansion, allowing us to seamlessly introduce additional services and APIs. As I plan to add more subdomains, this approach underscores our commitment to building a scalable, flexible blogging ecosystem that can evolve with our needs and aspirations."
          }
        ]
      },
      {
        "title": "Leveraging AWS SAM for Dynamic Contact Notifications",
        "contents": [
          {
            "description": "A key feature of my platform is the instant acknowledgment of reader inquiries, achieved through AWS SAM CloudFormation templates. This setup not only automates the infrastructure deployment but also introduces a real-time reaction to new contacts via DynamoDB Streams."
          },
          {
            "code": "ContactDynamoDBStreamer:\n  Type: AWS::Serverless::Function\n  Properties:\n    Runtime: java17\n    CodeUri: s3://cc-lambda-s3-bucket/c7c1762d1e5cf12055859dc066803d9f\n    Handler: blogs.ContactDynamoDBStream::handleRequest\n    Policies:\n    - DynamoDBReadPolicy:\n        TableName:\n          Ref: ContactTable\n    - Version: '2012-10-17'\n      Statement:\n      - Effect: Allow\n        Action:\n        - ses:SendEmail\n        - ses:SendRawEmail\n        Resource: '*'\n    Architectures:\n    - x86_64\n    MemorySize: 512\n    Environment:\n      Variables:\n        SES_EMAIL_SENDER_EMAIL_ADDRESS:\n          Ref: SESEmailSender\n        SES_EMAIL_BCC_ADDRESS:\n          Ref: SESBCCEmail\n    Events:\n      Stream:\n        Type: DynamoDB\n        Properties:\n          Stream:\n            Fn::GetAtt:\n            - ContactTable\n            - StreamArn\n          BatchSize: 10\n          StartingPosition: LATEST",
            "lang": "yaml",
            "caption": "AWS SAM template snippet for setting up ContactDynamoDBStreamer"
          },
          {
            "description": "The DynamoDB stream listener function, `ContactDynamoDBStream`, is crucial for real-time interaction. When a new contact message is entered into the DynamoDB `ContactTable`, this function gets triggered, examining the incoming data for new entries."
          },
          {
            "code": "class ContactDynamoDBStream: RequestHandler<DynamodbEvent, String> {\n    private val emailSender = EmailSender()\n\n    override fun handleRequest(ddbEvent: DynamodbEvent, context: Context): String {\n        val records = ddbEvent.records\n        for (record in records) {\n            if (record.eventName != \"INSERT\") {\n                continue\n            }\n            val newRecords = record.dynamodb.newImage\n            val nameAttribute = newRecords[\"name\"]\n            val emailAttribute = newRecords[\"email\"]\n            if (nameAttribute != null && emailAttribute != null) {\n                emailSender.sendContactConfirmationEmail(name = nameAttribute.s, toEmail = emailAttribute.s)\n            } else {\n                context.logger.log(\"Name or email attribute missing\")\n            }\n        }\n        return \"Successfully processed request\"\n    }\n}",
            "lang": "kotlin",
            "caption": "Kotlin code for handling DynamoDB stream events and sending emails"
          },
          {
            "description": "This Kotlin function listens for new entries in our contact table. If a new contact is detected (`eventName` is \"INSERT\"), it retrieves the contact's name and email. Then, it uses an `EmailSender` class to send a confirmation email to the new contact, assuring them their message has been received and will be addressed. This automated feedback loop is essential for maintaining engagement and trust with my blog's audience."
          }
        ]
      },
      {
        "title": "Exploring the Blog Content Structure",
        "contents": [
          {
            "description": "The structure of this blog post json is laid out in an easy-to-follow JSON format. Letâ€™s look at an example of how this JSON schema organizes the content:"
          },
          {
            "code": "{\n  \"title\": \"Title of the Blog Post\",\n  \"author\": \"Author Name\",\n  \"date\": \"Post Date\",\n  \"intro\": \"Introduction to the blog post\",\n  \"sections\": [\n    {\n      \"title\": \"Section Title\",\n      \"contents\": [\n        {\n          \"description\": \"Detailed description or insight for this section\"\n        },\n        {\n          \"code\": \"Optional code snippet related to this section\",\n          \"lang\": \"Programming language\",\n          \"caption\": \"Caption for the code snippet\"\n        }\n      ]\n    }\n  ]\n}",
            "lang": "json",
            "caption": "Example Blog Post JSON Structure"
          },
          {
            "description": "This example highlights the main components of our blog post JSON schema. The 'sections' array can contain multiple sections, each with its own `title` and `contents`. Within `contents`, I can include detailed `description` texts or `code` snippets with a specific `lang` (programming language) and an optional `caption`. This structured approach allows for a modular and detailed exploration of topics, making complex ideas more accessible."
          }
        ]
      },
      {
        "title": "Inside My Blog's AWS Setup",
        "contents": [
          {
            "description": "Building my blog meant putting together a system that works smoothly. I chose AWS because it offers everything I need: a place to keep my blog's files, a way to handle visits to my site without any server, and a simple method to manage data. Here's how I set it all up."
          },
          {
            "description": "I use Amazon S3 to store images and other static files because it's reliable and easy to use. My blog's content, like posts and comments, goes into DynamoDB. It's a database service that's quick and doesn't need me to handle servers. AWS Lambda runs small bits of code for me, doing things in the background without needing a permanent server running. To connect everything, I use AWS API Gateway, which makes sure data gets to where it needs to go safely."
          },
          {
            "description": "To show you what I mean, here's a picture of how my blog is set up on AWS. It shows which parts talk to each other and how they fit together."
          },
          {
            "image": "images/image18.jpg",
            "caption": "The Setup of My AWS Blog"
          },
          {
            "description": "This setup isn't just about starting something; it's about having a strong foundation that can grow. I'm learning more about AWS and other technologies every day. I plan to add more features and improve how my blog works. It's exciting to think about making it even better."
          }
        ]
      },
      {
        "title": "Streamlining Frontend deployment with GitHub Actions",
        "contents": [
          {
            "description": "Deploying my blogging platform efficiently is crucial, and GitHub Actions play a pivotal role in this process. With a setup that covers infrastructure, frontend deployment, and content management, here's a closer look into how each part of the deployment is automated."
          },
          {
            "description": "The deployment process is thoughtfully divided into three GitHub Actions, ensuring precision and control at every step. This methodical approach guarantees that updates are seamless and specific to the needs of the platform."
          },
          {
            "title": "1. Infrastructure Setup with GitHub Actions",
            "description": "The initial action focuses on the infrastructure setup. It's manually triggered through workflow dispatch, allowing for a deliberate review and application of changes. This action is crucial for maintaining a solid foundation for the platform."
          },
          {
            "code": "name: Setup infrastructure\non:\n  workflow_dispatch:\njobs:\n  Create-Infra:\n    name: Setup infra\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n      contents: read\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n      - name: Configure AWS Credentials from CI\n        uses: aws-actions/configure-aws-credentials@v4\n        with:\n          role-to-assume: arn:aws:iam::<account-id>:role/ci-role\n          aws-region: us-east-1\n      - name: Create Change Sets\n        run: aws cloudformation create-change-set --template-body file://./CloudFormation\\ Templates/frontend.yaml --stack-name front-end --change-set-name front-end-change-set --parameters file://./CloudFormation\\ Templates/InputParameters.json",
            "lang": "yaml",
            "caption": "GitHub Action for Setting Up Infrastructure"
          },
          {
            "title": "2. Frontend Deployment",
            "description": "The second action automates the building, packaging, and deployment of the React frontend. It mirrors the flexibility of the infrastructure setup, with manual triggers allowing for deployment at just the right time."
          },
          {
            "title": "3. Managing Blog Content",
            "description": "Finally, the content deployment action oversees the updating of JSON files and images, ensuring the blog remains current and engaging. This streamlined approach to content management exemplifies the benefits of automation."
          },
          {
            "description": "Through GitHub Actions, I've achieved a deployment workflow that's not only automated but also finely tuned to the demands of the platform. The ability to manually trigger actions via workflow dispatch provides unparalleled control over deployment timing and execution, showcasing the adaptive nature of modern web development practices."
          }
        ]
      },
      {
        "title": "Looking Ahead: The Journey Continues",
        "contents": [
          {
            "description": "As I reflect on the journey of building and launching my own blogging platform, I'm filled with a sense of excitement for the future. This project was not just about creating a space for my thoughts and interests; it was a profound learning experience that pushed the boundaries of what I thought was possible with technology."
          },
          {
            "description": "Going forward, my commitment to blogging on my platform remains unwavering. With each post, I see an opportunity not just to share my insights but also to explore the vast possibilities that AWS and other backend and DevOps technologies offer. The more I learn, the more I realize how much there is to discover."
          },
          {
            "description": "I am super excited to continue this journey, constantly improving the infrastructure behind my platform. The goal is to not only make it more robust and feature-rich but also to ensure that it reflects the latest best practices in cloud computing, serverless architecture, and software development."
          },
          {
            "description": "To everyone who has followed along, thank you. Your support fuels my motivation to keep exploring, learning, and sharing. Here's to many more posts, projects, and learning opportunities ahead. The journey of innovation and growth never truly ends, and I can't wait to see where it takes us next."
          }
        ]
      },
      {
        "title": "Explore My Blog's Code and Live Site",
        "contents": [
          {
            "description": "I've made the code for both the frontend and backend of my blog available on GitHub. If you're curious about the details or want to see how I've built everything, feel free to explore the repositories."
          },
          {
            "description": "### Frontend Repository\n\nYou can find the frontend code here: [my-blog frontend on GitHub](https://github.com/rust42/my-blog).\n\nThis part of the project is built with React, showcasing how I've structured the UI and handled user interactions."
          },
          {
            "description": "### Backend Repository\n\nThe backend, which handles data storage, retrieval, and other server-side logic, is available here: [CC-Project-Lambda backend on GitHub](https://github.com/rust42/CC-Project-Lambda).\n\nIt's a collection of AWS Lambda functions, demonstrating how I utilize serverless computing to power the blog."
          },
          {
            "description": "### Live Blog Site\n\nWant to see the result in action? Visit my blog at [https://blog.k6sandeep.com/](https://blog.k6sandeep.com/).\n\nIt's where all the pieces come together, offering a glimpse into what's possible when combining modern web development practices with AWS's powerful cloud capabilities."
          },
          {
            "description": "Sharing these resources is part of my commitment to open learning and collaboration. Whether you're a fellow developer interested in the technical aspects, or simply curious about the behind-the-scenes of a blog, I hope you find these insights valuable. And of course, I'm always looking to improve and expand, so your feedback and contributions are welcome!"
          }
        ]
      }
    ]
  }
  